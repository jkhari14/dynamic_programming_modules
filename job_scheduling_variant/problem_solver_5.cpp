///////////////////////////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE
//
// Compile this file using clang++, g++, or Microsoft Visual Studio C++ compiler.
//
// To compile using Clang type:
//    clang++ problem_solver_5.cpp -O2 -o problem_solver_5
// On some systems, you need to include the compiler version in the name, e.g.,
//    clang++-12 problem_solver_5.cpp -O2 -o problem_solver_5
//
// To compile with Microsoft Visual C++, launch Developer Command Prompt and type
//    cl problem_solver_5.cpp /EHsc /O2
//

#include <string>
#include <vector>
#include "test_framework.h"
#include "student_code_5.h"

const char* smallDataset = "small_problem_set_5.in";
const char* largeDataset = "large_problem_set_5.in";

const char*  helpMsg = "Please, indicate which problem set to use.\n\n"
                       "For small problem set, type: ./problem_solver_5 small\n"
                       "For large problem set, type: ./problem_solver_5 large\n";

const char* strNotice = "##################################\n"
                        "# Do not edit this file!\n"
                        "##################################\n";

constexpr int problem_set_id = 5;

struct ProblemN5: public TestFramework::BasicProblem
{
   std::vector<int> x;
   std::vector<int> y;
   int maxDistance;
   int scale;
};

int MaxTour(const std::vector<int>& x,
            const std::vector<int>& y, 
            int maxDistance,
            int scale)
{
   int nSize = x.size();
   assert(y.size() == nSize);
   assert(scale > 0);
   assert(maxDistance >= 0);

   std::vector<Point> points (nSize);

   for (int i = 0; i < nSize; ++i)
   {
      points[i] = Point{(double) x[i], (double) y[i]};
      points[i].x /= scale;
      points[i].y /= scale;
   }

   double rescaledDistance = ((double) (maxDistance)) / scale;

   return MaxTour(points, rescaledDistance);
}

int main(int argc, char *argv[])
{
   using namespace TestFramework;

   static_assert (GetTestFrameworkVersion () == 7,
      "TestFramework version 7 is required. Please, update test_framework.h.");

   ExitIfConditionFails((argc == 2) || (argc == 3), helpMsg);
   std::string firstArg(argv[1]);

   ExitIfConditionFails((firstArg == "small") || (firstArg == "large"), helpMsg);
   bool bSmallDataset = (firstArg == "small");

   std::cout << std::endl << "Problem set #" << problem_set_id << ". ";

   ProblemSetHeader header;
   RecordAdapter<ProblemSetHeader> psAdapter(header);
   AddDefaultProblemSetColumns(psAdapter);

   std::vector<ProblemN5> problems;
   TableAdapter<ProblemN5> prAdapter(problems);
   AddDefaultProblemColumns(prAdapter);

   AddColumn<ProblemN5>(prAdapter, "x", &ProblemN5::x);
   AddColumn<ProblemN5>(prAdapter, "y", &ProblemN5::y);
   AddColumn<ProblemN5>(prAdapter, "maxDistance", &ProblemN5::maxDistance);
   AddColumn<ProblemN5>(prAdapter, "scale", &ProblemN5::scale);

   BasicYamlParser parser(dynamic_cast<ITable*>(&psAdapter),
                          dynamic_cast<ITable*>(&prAdapter));

   const char* inputFilename = bSmallDataset ? smallDataset : largeDataset;
   std::cout << "File: " << inputFilename << ".\n";

   parser.ParseFile(inputFilename, true);
   GetStudentName(header.student_name);
   PreprocessProblemSet(problem_set_id, problems, header);

   for (int i = 0; i < (int) problems.size(); ++i)
   {
      auto& theProblem = problems[i];
      theProblem.student_answer = MaxTour(theProblem.x,
                                          theProblem.y, 
                                          theProblem.maxDistance,
                                          theProblem.scale);
   }

   ProcessResults(problems, header);

   std::cout << "Don't forget to submit your source code on Canvas.";
   std::cout << std::endl << std::endl;

   if (argc == 3)
   {
      const char * outputFilename = argv[2];
      std::cout << "Generating a report. ";
      std::cout << "The report is saved in file '" << outputFilename << "'.\n";
      TableAdapter<ProblemN5> prOutAdapter(problems);
      AddDefaultProblemColumnsForOutput(prOutAdapter);

      WriteTableToFile(outputFilename, &prOutAdapter, &psAdapter, true, strNotice);
   }
}
