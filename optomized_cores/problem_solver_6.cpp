///////////////////////////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE
//
// Compile this file using clang++, g++, or Microsoft Visual Studio C++ compiler.
//
// To compile using Clang type:
//    clang++ problem_solver_6.cpp -O2 -o problem_solver_6
// On some systems, you need to include the compiler version in the name, e.g.,
//    clang++-12 problem_solver_6.cpp -O2 -o problem_solver_6
//
// To compile with Microsoft Visual C++, launch Developer Command Prompt and type
//    cl problem_solver_6.cpp /EHsc /O2
//

#include <string>
#include <vector>
#include "test_framework.h"
#include "student_code_6.h"

const char* smallDataset = "small_problem_set_6.in";
const char* largeDataset = "large_problem_set_6.in";

const char*  helpMsg = "Please, indicate which problem set to use.\n\n"
                       "For small problem set, type: ./problem_solver_6 small\n"
                       "For large problem set, type: ./problem_solver_6 large\n";

const char* strNotice = "##################################\n"
                        "# Do not edit this file!\n"
                        "##################################\n";

constexpr int problem_set_id = 6;

struct ProblemN6: public TestFramework::BasicProblem
{
   std::vector<int> processing_times;
   std::vector<int> energy_consumption;
   int maxEnergy;
};


template<typename T>
auto create_table(int size, T value)
{   
   std::vector<T> table(size, value);
   return table;
}

template<typename... Targs>
auto create_table(int size, Targs... args)
{ 
   auto slice = create_table(args...);
   std::vector<decltype(slice)> table(size, slice);
   return table;
}

int MinProcessingTime(const std::vector<int>& processing_times,
                      const std::vector<int>& energy_consumption,
                      int maxEnergy)
{
   int nCores = 8;
   const char* msgCorruptedData = "Corrupted data set.";

   TestFramework::ExitIfConditionFails(
         (processing_times.size() == energy_consumption.size()) && 
         (processing_times.size() % nCores == 0),
         msgCorruptedData);

   int nJobs = processing_times.size() / nCores;

   auto jobProfiles = create_table(nJobs, nCores, Profile());

   for (int i = 0; i < nJobs; ++i)
   {
      for (int j = 0; j < nCores; ++j)
      {
         int index = i * nCores + j;
         jobProfiles[i][j].time   = processing_times[index];
         jobProfiles[i][j].energy = energy_consumption[index];

         bool isPositive = (jobProfiles[i][j].time >= 0) && 
                           (jobProfiles[i][j].energy >= 0);
         
         TestFramework::ExitIfConditionFails(isPositive, msgCorruptedData);
      }
   }

   return MinProcessingTime(jobProfiles, maxEnergy);
}

int main(int argc, char *argv[])
{
   using namespace TestFramework;

   static_assert (GetTestFrameworkVersion () == 7,
      "TestFramework version 7 is required. Please, update test_framework.h.");

   ExitIfConditionFails((argc == 2) || (argc == 3), helpMsg);
   std::string firstArg(argv[1]);

   ExitIfConditionFails((firstArg == "small") || (firstArg == "large"), helpMsg);
   bool bSmallDataset = (firstArg == "small");

   std::cout << std::endl << "Problem set #" << problem_set_id << ". ";

   ProblemSetHeader header;
   RecordAdapter<ProblemSetHeader> psAdapter(header);
   AddDefaultProblemSetColumns(psAdapter);

   std::vector<ProblemN6> problems;
   TableAdapter<ProblemN6> prAdapter(problems);
   AddDefaultProblemColumns(prAdapter);

   AddColumn<ProblemN6>(prAdapter, "processing_times", &ProblemN6::processing_times);
   AddColumn<ProblemN6>(prAdapter, "energy_consumption", &ProblemN6::energy_consumption);
   AddColumn<ProblemN6>(prAdapter, "maxEnergy", &ProblemN6::maxEnergy);

   BasicYamlParser parser(dynamic_cast<ITable*>(&psAdapter),
                          dynamic_cast<ITable*>(&prAdapter));

   const char* inputFilename = bSmallDataset ? smallDataset : largeDataset;
   std::cout << "File: " << inputFilename << ".\n";

   parser.ParseFile(inputFilename, true);
   GetStudentName(header.student_name);
   PreprocessProblemSet(problem_set_id, problems, header);

   for (int i = 0; i < (int) problems.size(); ++i)
   {
      auto& theProblem = problems[i];
      theProblem.student_answer = MinProcessingTime(theProblem.processing_times, theProblem.energy_consumption, theProblem.maxEnergy);
   }

   ProcessResults(problems, header);

   std::cout << "Don't forget to submit your source code on Canvas.";
   std::cout << std::endl << std::endl;

   if (argc == 3)
   {
      const char * outputFilename = argv[2];
      std::cout << "Generating a report. ";
      std::cout << "The report is saved in file '" << outputFilename << "'.\n";
      TableAdapter<ProblemN6> prOutAdapter(problems);
      AddDefaultProblemColumnsForOutput(prOutAdapter);

      WriteTableToFile(outputFilename, &prOutAdapter, &psAdapter, true, strNotice);
   }

   return 0;
}
